{"version":3,"sources":["components/GlobalFilter.tsx","components/TableToolbar.tsx","components/EnhancedTable.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","search","display","alignItems","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","inputRoot","color","inputInput","padding","transition","transitions","create","GlobalFilter","globalFilter","setGlobalFilter","classes","className","TextField","fullWidth","variant","value","onChange","e","target","undefined","placeholder","inputProps","InputProps","endAdornment","IconButton","useToolbarStyles","root","paddingLeft","paddingRight","highlight","type","secondary","main","lighten","light","text","primary","dark","title","flex","TableToolbar","props","Toolbar","clsx","EnhancedTable","columns","data","useTable","useGlobalFilter","useSortBy","hooks","allColumns","push","getTableProps","headerGroups","prepareRow","state","rows","TableContainer","Table","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","id","getHeaderProps","getSortByToggleProps","style","render","TableSortLabel","active","isSorted","direction","isSortedDesc","TableBody","row","i","getRowProps","cells","cell","getCellProps","Header","children","tooltip","Tooltip","textOverflow","overflow","whiteSpace","accessor","App","maxWidth","margin","CssBaseline","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c7f8d617.chunk.js","sourcesContent":["import React from 'react'\r\nimport { fade, makeStyles } from '@material-ui/core/styles'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  search: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: '0 !important',\r\n    width: '100% !important',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 7),\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: 200,\r\n    },\r\n  },\r\n}))\r\n\r\ntype Props = {\r\n  globalFilter: string,\r\n  setGlobalFilter: (filter: string | undefined) => void,\r\n};\r\n\r\nexport const GlobalFilter = ({\r\n  globalFilter,\r\n  setGlobalFilter,\r\n}: Props) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.search}>\r\n      <TextField\r\n        fullWidth\r\n        variant=\"outlined\"\r\n        value={globalFilter || ''}\r\n        onChange={e => {\r\n          setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n        }}\r\n        placeholder='Search...'\r\n        inputProps={{'aria-label': 'search'}}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <IconButton>\r\n              <SearchIcon />\r\n            </IconButton>\r\n          )\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n};","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport { Toolbar, lighten, makeStyles } from '@material-ui/core'\r\nimport { GlobalFilter } from './GlobalFilter'\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}))\r\n\r\ntype Props = {\r\n  setGlobalFilter: (filter: string | undefined) => void;\r\n  globalFilter: string;\r\n};\r\n\r\nexport const TableToolbar = (props: Props) => {\r\n  const classes = useToolbarStyles()\r\n  const {\r\n    setGlobalFilter,\r\n    globalFilter,\r\n  } = props\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root)}\r\n    >\r\n      <GlobalFilter\r\n        globalFilter={globalFilter}\r\n        setGlobalFilter={setGlobalFilter}\r\n      />\r\n    </Toolbar>\r\n  )\r\n};","import React from 'react'\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n} from '@material-ui/core';\r\nimport {\r\n  Column,\r\n  useGlobalFilter,\r\n  useSortBy,\r\n  useTable,\r\n  UseGlobalFiltersInstanceProps,\r\n  UseGlobalFiltersState,\r\n  TableInstance,\r\n} from 'react-table'\r\nimport { TableToolbar } from './TableToolbar'\r\n\r\nexport type Point = {\r\n  country: string;\r\n  normalizedValue: number;\r\n  rawValue: number;\r\n  population: number;\r\n  date: string;\r\n  rank: number;\r\n};\r\n\r\ntype Props = {\r\n  columns: Column<Point>[],\r\n  data: Point[],\r\n};\r\n\r\nexport const EnhancedTable = ({\r\n  columns,\r\n  data,\r\n}: Props) => {\r\n  const {\r\n    getTableProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    setGlobalFilter,\r\n    state: {globalFilter},\r\n    rows,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    hooks => {\r\n      hooks.allColumns.push(columns => [\r\n        ...columns,\r\n      ])\r\n    }\r\n  ) as UseGlobalFiltersInstanceProps<any> & TableInstance<any> & { state: UseGlobalFiltersState<any> };\r\n\r\n  return (\r\n    <TableContainer>\r\n      <TableToolbar\r\n        setGlobalFilter={setGlobalFilter}\r\n        globalFilter={globalFilter}\r\n      />\r\n      <Table {...getTableProps()}>\r\n        <TableHead>\r\n          {headerGroups.map(headerGroup => (\r\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column: any) => (\r\n                <TableCell\r\n                  {...(column.id === 'selection'\r\n                    ? column.getHeaderProps()\r\n                    : column.getHeaderProps({...column.getSortByToggleProps(), title: undefined}))}\r\n                >\r\n                  <div style={{display: 'inline-flex'}}>\r\n                    {column.render('Header')}\r\n                    {column.id !== 'selection' ? (\r\n                      <TableSortLabel\r\n                        active={column.isSorted}\r\n                        // react-table has a unsorted state which is not treated here\r\n                        direction={column.isSortedDesc ? 'desc' : 'asc'}\r\n                      />\r\n                    ) : null}\r\n                  </div>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <TableRow {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <TableCell {...cell.getCellProps()}>\r\n                      {cell.render('Cell')}\r\n                    </TableCell>\r\n                  )\r\n                })}\r\n              </TableRow>\r\n            )\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};","import React from 'react'\r\nimport { CssBaseline, Tooltip } from '@material-ui/core'\r\nimport { Column } from \"react-table\";\r\nimport { EnhancedTable, Point } from './components/EnhancedTable'\r\nimport data from './results.json';\r\n\r\nconst Header = ({children, tooltip}: { children: string; tooltip: string }) => (\r\n  <Tooltip title={tooltip}>\r\n  <span style={{\r\n    textOverflow: 'ellipsis',\r\n    overflow: 'hidden',\r\n    whiteSpace: 'nowrap',\r\n  }}>\r\n    {children}\r\n  </span>\r\n  </Tooltip>\r\n);\r\n\r\nconst columns: Column<Point>[] = [\r\n  {\r\n    Header: <Header tooltip='Rank (Normalized per 100,000 people)'>Rank (N)</Header>,\r\n    accessor: 'rank',\r\n  },\r\n  {\r\n    Header: <Header tooltip='Region'>Region</Header>,\r\n    accessor: 'country',\r\n  },\r\n  {\r\n    Header: <Header tooltip='Confirmed Cases (Normalized per 100,000 people)'>Cases (N)</Header>,\r\n    accessor: 'normalizedValue',\r\n  },\r\n  {\r\n    Header: <Header tooltip='Confirmed Cases'>Cases</Header>,\r\n    accessor: 'rawValue',\r\n  },\r\n  {\r\n    Header: <Header tooltip='Population'>Pop</Header>,\r\n    accessor: 'population',\r\n  }\r\n]\r\n\r\nconst App = () => {\r\n  return (\r\n    <div style={{maxWidth: 1024, margin: 'auto'}}>\r\n      <CssBaseline />\r\n      <EnhancedTable\r\n        columns={columns}\r\n        data={data}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}